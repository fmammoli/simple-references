{"version":3,"sources":["Hooks.js","App.js","reportWebVitals.js","index.js"],"names":["useFetch","initialUrl","initialOptions","React","useState","data","setData","isLoading","setIsLoading","isError","setIsError","url","options","request","setRequest","useEffect","a","console","log","mode","fetch","result","json","resultData","fetchData","useDOITextResponse","initialDOI","headers","Headers","Accept","get","text","useFetch2","doiData","setDoiData","doi","queryUrl","includes","AbntItem","reference","months","authors","flatMap","item","family","toUpperCase","given","join","title","journal","volume","issue","pages","month","year","availableAt","filter","val","formatReference","SearchItem","setDOI","setSearchList","subtitle","URL","type","publisher","author","issued","onClick","event","DOI","DoiForm","query","setQuery","onSubmit","preventDefault","handleSubmit","value","onChange","target","FreeSearchForm","setSearchQuery","App","references","dataList","setDataList","doiIsLoading","doiIsError","searchList","initialSearchQuery","newSearchQuery","formattedQuery","split","useFreeSearch","searchData","searchIsLoading","searchIsError","message","items","oldList","className","length","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e9421be.chunk.js","sourcesContent":["import React from \"react\";\n\n//Transform the response from DOI content negotiation into an simpler object\nfunction transformJournalArticle(data) {\n  const months = [\n    \"jan\",\n    \"fev\",\n    \"mar\",\n    \"abr\",\n    \"maio\",\n    \"jun\",\n    \"jul\",\n    \"ago\",\n    \"set\",\n    \"out\",\n    \"nov\",\n    \"dez\",\n  ];\n\n  const reference = {\n    authors: data.author,\n    title: data.title,\n    subTitle: data.subtitle,\n    journal: data[\"container-title\"],\n    volume: data.volume,\n    issue: data.issue,\n    pages: data.page,\n    month: data.issued[\"date-parts\"][0][1],\n    year: data.issued[\"date-parts\"][0][0],\n    availableAt: data.link[0].URL,\n    doi: data.URL,\n    type: data.type,\n  };\n}\n\nfunction useFetch2(initialUrl, initialOptions = \"\") {\n  const [data, setData] = React.useState(null);\n  //const [url, setUrl] = React.useState(initialUrl);\n  //const [options, setOptions] = React.useState(initialOptions);\n\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isError, setIsError] = React.useState(false);\n\n  const [request, setRequest] = React.useState({\n    url: initialUrl,\n    options: { ...initialOptions },\n  });\n\n  React.useEffect(() => {\n    console.log(\"to fetch\");\n    //if(!request.url) return;\n\n    async function fetchData(url, options = \"\") {\n      console.log(url);\n      if (!url || url === \"\") {\n        console.log(\"Empty url, value: \" + url);\n        return;\n      }\n      console.log(\"fetching\");\n\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        console.log(`with options ${options.mode}`);\n        const result = options\n          ? await fetch(url, { ...options })\n          : await fetch(url);\n        //const resultData = await result.json();\n        let resultData = null;\n        if (\n          options.headers.get(\"Accept\") ===\n          \"text/x-bibliography; style=associacao-brasileira-de-normas-tecnicas\"\n        ) {\n          resultData = await result.text();\n        }\n        setData(resultData);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    }\n\n    fetchData(request.url, request.options);\n  }, [request]);\n\n  return [{ data, isLoading, isError }, setRequest];\n}\n\n//Implementação antiga, nem sei mais pq é diferente\nfunction useFetch(initialUrl, initialOptions = \"\") {\n  const [data, setData] = React.useState(null);\n  //const [url, setUrl] = React.useState(initialUrl);\n  //const [options, setOptions] = React.useState(initialOptions);\n\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isError, setIsError] = React.useState(false);\n\n  const [request, setRequest] = React.useState({\n    url: initialUrl,\n    options: { ...initialOptions },\n  });\n\n  React.useEffect(() => {\n    console.log(\"to fetch\");\n    //if(!request.url) return;\n\n    async function fetchData(url, options = \"\") {\n      console.log(url);\n      if (!url || url === \"\") {\n        console.log(\"Empty url, value: \" + url);\n        return;\n      }\n      console.log(\"fetching\");\n\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        console.log(`with options ${options.mode}`);\n        const result = options\n          ? await fetch(url, { ...options })\n          : await fetch(url);\n        const resultData = await result.json();\n        //const resultData = await result.text();\n        console.log(resultData);\n        setData(resultData);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    }\n\n    fetchData(request.url, request.options);\n  }, [request]);\n\n  return [{ data, isLoading, isError }, setRequest];\n}\n\nfunction useDOITextResponse(initialDOI) {\n  const contentNegotiationHeader = new Headers({\n    Accept:\n      \"text/x-bibliography; style=associacao-brasileira-de-normas-tecnicas\",\n  });\n  const options = { headers: contentNegotiationHeader, mode: \"cors\" };\n\n  const [{ data: fetchData, isLoading, isError }, setRequest] = useFetch2(\n    initialDOI,\n    options\n  );\n\n  const [doiData, setDoiData] = React.useState(\"\");\n\n  function setDOI(doi) {\n    const queryUrl = doi.includes(\"https://doi.org/\")\n      ? doi\n      : \"https://doi.org/\" + doi;\n    setRequest({ url: queryUrl, options: { ...options } });\n  }\n\n  React.useEffect(() => {\n    if (fetchData) {\n      setDoiData(fetchData);\n    }\n  }, [fetchData]);\n\n  return [{ data: doiData, isLoading, isError }, setDOI];\n}\n\nfunction useDOI(initialDOI) {\n  const contentNegotiationHeader = new Headers({\n    Accept: \"application/vnd.citationstyles.csl+json, application/rdf+xml\",\n  });\n  const options = { headers: contentNegotiationHeader, mode: \"cors\" };\n\n  const [{ data: fetchData, isLoading, isError }, setRequest] = useFetch(\n    initialDOI,\n    options\n  );\n\n  const [doiData, setDoiData] = React.useState(\"\");\n\n  function setDOI(doi) {\n    const queryUrl = doi.includes(\"https://doi.org/\")\n      ? doi\n      : \"https://doi.org/\" + doi;\n    setRequest({ url: queryUrl, options: { ...options } });\n  }\n\n  React.useEffect(() => {\n    if (fetchData) {\n      const reference = {\n        authors: fetchData.author,\n        title: fetchData.title,\n        subTitle: fetchData.subtitle,\n        journal: fetchData[\"container-title\"]\n          ? fetchData[\"container-title\"]\n          : \"\",\n        volume: fetchData.volume,\n        issue: fetchData.issue,\n        pages: fetchData.page,\n        month: fetchData.issued?.[\"date-parts\"]?.[0][1],\n        year: fetchData.issued?.[\"date-parts\"]?.[0][0],\n        availableAt: fetchData.link?.[0]?.URL,\n        doi: fetchData.URL,\n        type: fetchData.type,\n      };\n      setDoiData(reference);\n    }\n  }, [fetchData]);\n\n  return [{ data: doiData, isLoading, isError }, setDOI];\n}\n\nfunction useFreeSearch(initialSearchQuery) {\n  const [{ data, isLoading, isError }, setRequest] = useFetch(\n    initialSearchQuery\n  );\n\n  function setSearchQuery(newSearchQuery) {\n    const formattedQuery = newSearchQuery.split(\" \").join(\"+\");\n    console.log(`Searching for for ${formattedQuery}`);\n    setRequest({\n      url: `https://api.crossref.org/works?query=${formattedQuery}&mailto=fmammoli@gmail.com`,\n    });\n  }\n\n  return [{ data, isLoading, isError }, setSearchQuery];\n}\n\nexport { useFetch, useDOI, useDOITextResponse, useFreeSearch };\n","import React from 'react';\nimport {useDOI, useDOITextResponse, useFreeSearch} from './Hooks';\nimport './App.css';\n\n//Formato Documento Eletrônico(ABNT)\n\n//Sobrenome, Nome. Titulo. Nome do Journal, cidade, volume, numero, paginas, mes, ano.\n//MONTEIRO, Marko. Construindo imagens e territórios: pensando a visualidade e a materialidade do sensoriamento remoto. Hist. cienc. saude-Manguinhos,  Rio de Janeiro ,  v. 22, n. 2, p. 577-591,  jun.  2015 .   Disponível em <http://www.scielo.br/scielo.php?script=sci_arttext&pid=S0104-59702015000200016&lng=pt&nrm=iso>. acessos em  29  nov.  2020.  https://doi.org/10.1590/S0104-59702015000200006.\n\nfunction AbntItem({reference}) {\n\n    const months = ['jan', 'fev', 'mar', 'abr', 'maio', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'];\n\n    //Format reference by ommiting lacking information, might not be the best solution.\n    function formatReference(reference) {\n        const authorsString = `${reference.authors.flatMap(item => `${item.family.toUpperCase()}, ${item.given}`).join('; ')}.`;\n        const titleString = reference.title ? `${reference.title}.` : '';\n        const journalString = reference.journal ? `${reference.journal},` : '';\n        const volumeString = reference.volume ? `v. ${reference.volume},` : '';\n        const issueString = reference.issue ? `n. ${reference.issue},` : '';\n        const pagesString = reference.pages ? `p. ${reference.pages},` : '';\n        const monthString = reference.month ? `${months[reference.month-1]}.` : '';\n        const yearString = reference.year ? `${reference.year}.` : '';\n        const availableAtSring = reference.availableAt ? `Disponível em: <${reference.availableAt}>` : '';\n        const doiString = reference.doi ? `DOI: ${reference.doi}` : '';\n        return [authorsString, titleString, journalString, volumeString, issueString, pagesString, monthString, yearString, availableAtSring, doiString].filter(val => val).join(' ');\n    }\n\n    \n    return (        \n        <p>{formatReference(reference)}</p>\n    )\n}\n\nfunction SearchItem({item, setDOI, setSearchList}) {\n    function handleOnClick(event) {\n        setDOI(item.DOI);\n        setSearchList([]);\n    }\n    //onst authorsString = `${item.author.flatMap(element => `${element.family.toUpperCase()}, ${element.given}`).join('; ')}.`;\n\n    return (\n        <li>\n            <p>Title: {item.title?.[0]}</p>\n            <p>Subtitle: {item.subtitle?.[0]}</p>\n            <p>URL: {item.URL}</p>\n            <p>Type: {item.type}</p>\n            <p>Publisher: {item.publisher}</p>\n            <p>Author: {item.author?.[0].given} {item.author?.[0]?.family}</p>\n            <p>Year: {item.issued?.['date-parts']?.[0]?.[0]}</p>\n            <button onClick={event => handleOnClick(event)}>Add</button>\n        </li>\n    )\n}\n\nfunction DoiForm({setDOI}) {\n    const [query, setQuery] = React.useState('');\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        if(query !== '') {\n            setDOI(query);\n            setQuery('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={event => {handleSubmit(event)}}>\n            DOI input: \n            <input\n                type=\"text\"\n                value={query}\n                onChange={event => setQuery(event.target.value)}\n            />\n            <button type=\"submit\">Search</button>\n        </form>\n    );\n}\n\nfunction FreeSearchForm({setSearchQuery}) {\n    const [query, setQuery] = React.useState('');\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        if(query !== ''){\n            console.log(query);\n            setSearchQuery(query);\n            setQuery('');\n        }\n    }\n\n    return (\n        <form onSubmit={event => {handleSubmit(event)}}>\n            Free Text Search:\n            <input type=\"text\" value={query} onChange={event => setQuery(event.target.value)}></input>\n            <button type=\"Submit\">Search</button>\n        </form>\n    )\n}\n\nfunction App() {\n    const [dataList, setDataList] = React.useState({references: []});\n    const [{data: doiData, isLoading: doiIsLoading, isError: doiIsError}, setDOI] = useDOITextResponse(null);\n\n    //const [{data, isLoading, isError}, setUrl] = useFetch('', '');\n\n    const [searchList, setSearchList] = React.useState([]);\n    const [{data: searchData, isLoading: searchIsLoading, isError: searchIsError}, setSearchQuery] = useFreeSearch(null);\n    \n    React.useEffect(() => {\n        if(searchData) {\n            setSearchList(searchData?.message?.items);    \n        }\n    },[searchData]);\n    \n    React.useEffect(() => {\n        console.log(`Doi Effect`);\n        if (doiData) {\n            setDataList(oldList => {\n                console.log(`Adding ${doiData} to dataList`);\n                return {references: [doiData, ...oldList.references]}\n            });    \n        }        \n    },[doiData]);\n\n    return (\n        <main className=\"App\">\n            <h1>Simple Reference</h1>\n            <section>\n                <p>\n                    Input a DOI and get a ABNT formatted reference.\n                </p>\n                <p>\n                * It only works for journal articles yet*\n                </p>\n                <p>\n                    This uses simple content negotiation to retrieve metadata from DOIs.\n                </p>\n                <p>\n                    You can search by text in the Free Text Search. Text searches uses the CrossRef API, so it works better for journal articles than books.\n                </p>\n                <div>\n                    <p>Here are some DOIs you can test:</p>\n                    <div>https://doi.org/10.1590/S0104-59702015000200006</div>\n                    <div>https://doi.org/10.1177/0306312717730428</div>\n                    <div>https://doi.org/10.1177/0306312718783087</div>\n                </div>\n                <p></p>\n                <article>\n                    DOI Search\n                    <DoiForm setDOI={setDOI}></DoiForm>\n                </article>\n                <p></p>\n                <article>\n                    Free Form Search\n                    <FreeSearchForm setSearchQuery={setSearchQuery}></FreeSearchForm>\n                </article>\n            </section>\n            <section>\n                <h2>Search Results</h2>\n                {!!searchList.length && <button onClick={event => setSearchList([])}>Clear Search</button>}\n                {searchIsLoading && <div>Loading search...</div>}\n                {searchIsError && <div>Opps, search: not found...</div>}\n\n                { searchList && \n                <ul className=\"left\">\n                { \n                    searchList.map( (item, index) => (\n                        <SearchItem item={item} key={index} index={index} setDOI={setDOI} setSearchList={setSearchList}></SearchItem>\n                    ))\n                }\n                </ul>\n                }\n                \n\n            </section>\n            <section>\n                <h2>Reference List</h2>\n                \n                {doiIsError && <div>Opps, DOI: not found...</div>}\n                {doiIsLoading && <div>Loading...</div>}\n                \n                { dataList && \n                    <ul className=\"left\">\n                    {\n                        dataList.references.map( (item, index) => (\n                            typeof(item) === 'string' ? <p key={index} index={index}>{item}</p> : <AbntItem reference={item} key={index} index={index}></AbntItem>\n                        ))\n                    }\n                    </ul>\n                }\n            </section>\n        </main>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}