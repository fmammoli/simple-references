{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["AbntItem","reference","console","log","authors","flatMap","item","family","toUpperCase","given","join","title","journal","volume","issue","pages","month","year","available_at","useCrossRefApi","initialUrl","initialData","React","useState","data","setData","url","setUrl","isLoading","setIsLoading","isError","setIsError","a","fetch","result","json","resultData","useEffect","fetchData","ReferenceForm","query","setQuery","onSubmit","event","preventDefault","type","value","onChange","target","App","references","dataList","setDataList","newReference","message","author","page","issued","URL","buildReferenceObject","oldList","className","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c19aa53.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n    //Formato Documento Eletrônico(ABNT)\n\n    //Sobrenome, Nome. Titulo. Nome do Journal, cidade, volume, numero, paginas, mes, ano.\n    //MONTEIRO, Marko. Construindo imagens e territórios: pensando a visualidade e a materialidade do sensoriamento remoto. Hist. cienc. saude-Manguinhos,  Rio de Janeiro ,  v. 22, n. 2, p. 577-591,  jun.  2015 .   Disponível em <http://www.scielo.br/scielo.php?script=sci_arttext&pid=S0104-59702015000200016&lng=pt&nrm=iso>. acessos em  29  nov.  2020.  https://doi.org/10.1590/S0104-59702015000200006.\n\nfunction AbntItem({reference}) {\n    console.log(reference);\n    const authors = reference.authors.flatMap(item => `${item.family.toUpperCase()}, ${item.given}`).join('; ');\n\n    const months = ['jan', 'fev', 'mar', 'abr', 'maio', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'];\n\n    return (\n    <p>{`${authors}. ${reference.title}. ${reference.journal}, v. ${reference.volume}, n. ${reference.issue}, p. ${reference.pages}, ${months[reference.month-1]}. ${reference.year}. Disponível em: <${reference.available_at}>`}</p>\n    )\n}\n\nfunction useCrossRefApi(initialUrl, initialData) {\n    const [data, setData] = React.useState(initialData);\n    const [url, setUrl] = React.useState(initialUrl);\n\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [isError, setIsError] = React.useState(false);\n\n    async function fetchData (url) {\n        if(!url) return;\n\n        setIsError(false);\n        setIsLoading(true);\n\n        try {\n            const result = await fetch(url);\n            const resultData = await result.json();\n            console.log('fetching');\n            \n            setData(resultData);\n            \n        } catch (error) {\n            setIsError(true);\n        }\n        setIsLoading(false);\n    }\n\n    React.useEffect(() => {\n        console.log('to fetch')\n        fetchData(url);\n    },[url]);\n\n    return [{data, isLoading, isError}, setUrl]\n}\n\nfunction ReferenceForm({setUrl}) {\n    const [query, setQuery] = React.useState(\"\");\n\n    return (\n        <form onSubmit={event => {\n            event.preventDefault();\n            setUrl(`https://api.crossref.org/works/${query}`);\n            setQuery('');\n        }}>\n            <input\n                type=\"text\"\n                value={query}\n                onChange={event => setQuery(event.target.value)}\n            />\n            <button type=\"submit\">Search</button>\n        </form>\n    );\n}\n\nfunction App() {\n    const [dataList, setDataList] = React.useState({references: []});\n\n    const [{data, isLoading, isError}, setUrl] = useCrossRefApi('', '');\n    \n    React.useEffect(() => {\n        console.log('efecting')\n        if(!data) return;\n\n        function buildReferenceObject(data) {\n            return {\n                authors: data.message.author,\n                title: data.message.title[0],\n                journal: data.message['container-title'][0],\n                volume: data.message.volume,\n                issue: data.message.issue,\n                pages: data.message.page,\n                month: data.message.issued['date-parts'][0][1],\n                year: data.message.issued['date-parts'][0][0],\n                available_at: data.message.URL\n            }\n        }\n        const newReference = buildReferenceObject(data);\n        setDataList(oldList => {\n            console.log(`Addins ${newReference.title} to dataList`);\n            return {references: [newReference, ...oldList.references]}\n        });\n        \n    },[data]);\n\n    return (\n        <main className=\"App\">\n            <h1>Simple Reference</h1>\n            <section>\n                <p>\n                    Input a DOI and get a ABNT formatted reference.\n                </p>\n                <p>\n                    This uses CrossRef free and open API so be mindfull about the number of requests.\n                </p>\n                <div>\n                    <p>Here are some DOIs you can test:</p>\n                    <div>https://doi.org/10.1590/S0104-59702015000200006</div>\n                    <div>https://doi.org/10.1177/0306312717730428</div>\n                </div>\n                <p></p>\n                <article>\n                    <ReferenceForm setUrl={setUrl} ></ReferenceForm>\n                </article>\n            </section>\n            \n            <section>\n                <h2>Reference List</h2>\n                \n                {isError && <div>Opps, DOI not found...</div>}\n                {isLoading && <div>Loading...</div>}\n            \n                <ul className=\"left\">\n                    {\n                        dataList.references.map( (item, index) => (\n                            <AbntItem reference={item} key={item.available_at}></AbntItem>\n                        ))\n                    }\n                </ul>\n                \n            </section>\n        </main>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}