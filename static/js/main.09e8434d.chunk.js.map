{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["AbntItem","reference","months","authors","flatMap","item","family","toUpperCase","given","join","title","journal","volume","issue","pages","month","year","availableAt","doi","filter","val","formatReference","ReferenceForm","setUrl","React","useState","query","setQuery","onSubmit","event","preventDefault","queryUrl","includes","handleSubmit","type","value","onChange","target","App","references","dataList","setDataList","initialUrl","initialData","data","setData","url","isLoading","setIsLoading","isError","setIsError","useEffect","a","console","log","contentNegotiationHeader","Headers","fetch","headers","mode","result","json","resultData","fetchData","useFetch","newReference","author","page","issued","link","URL","buildReferenceObject","oldList","className","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09e8434d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n    //Formato Documento Eletrônico(ABNT)\n\n    //Sobrenome, Nome. Titulo. Nome do Journal, cidade, volume, numero, paginas, mes, ano.\n    //MONTEIRO, Marko. Construindo imagens e territórios: pensando a visualidade e a materialidade do sensoriamento remoto. Hist. cienc. saude-Manguinhos,  Rio de Janeiro ,  v. 22, n. 2, p. 577-591,  jun.  2015 .   Disponível em <http://www.scielo.br/scielo.php?script=sci_arttext&pid=S0104-59702015000200016&lng=pt&nrm=iso>. acessos em  29  nov.  2020.  https://doi.org/10.1590/S0104-59702015000200006.\n\nfunction AbntItem({reference}) {\n\n    const months = ['jan', 'fev', 'mar', 'abr', 'maio', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'];\n\n    //Format reference by ommiting lacking information, might not be the best solution.\n    function formatReference(reference) {\n        const authorsString = `${reference.authors.flatMap(item => `${item.family.toUpperCase()}, ${item.given}`).join('; ')}.`;\n        const titleString = reference.title ? `${reference.title}.` : '';\n        const journalString = reference.journal ? `${reference.journal},` : '';\n        const volumeString = reference.volume ? `v. ${reference.volume},` : '';\n        const issueString = reference.issue ? `n. ${reference.issue},` : '';\n        const pagesString = reference.pages ? `p. ${reference.pages},` : '';\n        const monthString = reference.month ? `${months[reference.month-1]}.` : '';\n        const yearString = reference.year ? `${reference.year}.` : '';\n        const availableAtSring = reference.availableAt ? `Disponível em: <${reference.availableAt}>` : '';\n        const doiString = reference.doi ? `DOI: ${reference.doi}` : '';\n       \n        return [authorsString, titleString, journalString, volumeString, issueString, pagesString, monthString, yearString, availableAtSring, doiString].filter(val => val).join(' ');\n    }\n    \n\n    return (\n        <p>{formatReference(reference)}</p>\n    //<p>{`${authors}. ${reference.title}. ${reference.journal}, v. ${reference.volume}, n. ${reference.issue}, p. ${reference.pages}, ${months[reference.month-1]}. ${reference.year}. Disponível em: <${reference.available_at}>, DOI: <${reference.doi}>`}</p>\n    )\n}\n\nfunction useFetch(initialUrl, initialData) {\n    const [data, setData] = React.useState(initialData);\n    const [url, setUrl] = React.useState(initialUrl);\n\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [isError, setIsError] = React.useState(false);\n\n    React.useEffect(() => {\n        console.log('to fetch')\n\n        async function fetchData (url) {\n            if(!url) return;\n            console.log('fetching');\n            setIsError(false);\n            setIsLoading(true);\n    \n            try {\n                const contentNegotiationHeader = new Headers({'Accept': 'application/vnd.citationstyles.csl+json, application/rdf+xml, text/x-bibliography; style=associacao-brasileira-de-norams-tecnicas'});\n                const result = await fetch(url, {headers: contentNegotiationHeader, mode: 'cors'});\n                const resultData = await result.json();\n                \n                console.log(resultData);\n                setData(resultData);\n                \n            } catch (error) {\n                setIsError(true);\n            }\n            setIsLoading(false);\n        }\n\n        fetchData(url);\n    },[url]);\n\n    return [{data, isLoading, isError}, setUrl]\n}\n\nfunction ReferenceForm({setUrl}) {\n    const [query, setQuery] = React.useState(\"\");\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        //setUrl(`https://api.crossref.org/works/${query}`);\n        const queryUrl = query.includes('https://doi.org/') ? query : 'https://doi.org/'+query;\n        setUrl(queryUrl);\n        setQuery('');\n    }\n\n    return (\n        <form onSubmit={event => {handleSubmit(event)}}>\n            <input\n                type=\"text\"\n                value={query}\n                onChange={event => setQuery(event.target.value)}\n            />\n            <button type=\"submit\">Search</button>\n        </form>\n    );\n}\n\nfunction App() {\n    const [dataList, setDataList] = React.useState({references: []});\n\n    const [{data, isLoading, isError}, setUrl] = useFetch('', '');\n    \n    React.useEffect(() => {\n        console.log('efecting')\n        if(!data) return;\n\n        function buildReferenceObject(data) {\n            return {\n                authors: data.author,\n                title: data.title,\n                journal: data['container-title'],\n                volume: data.volume,\n                issue: data.issue,\n                pages: data.page,\n                month: data.issued['date-parts'][0][1],\n                year: data.issued['date-parts'][0][0],\n                availableAt: data.link[0].URL,\n                doi: data.URL\n            }\n        }\n        const newReference = buildReferenceObject(data);\n        setDataList(oldList => {\n            console.log(`Addins ${newReference.title} to dataList`);\n            return {references: [newReference, ...oldList.references]}\n        });\n        \n    },[data]);\n\n    return (\n        <main className=\"App\">\n            <h1>Simple Reference</h1>\n            <section>\n                <p>\n                    Input a DOI and get a ABNT formatted reference.\n                </p>\n                <p>\n                    This uses simple content negotiation to retrieve metadata from DOIs.\n                </p>\n                <div>\n                    <p>Here are some DOIs you can test:</p>\n                    <div>https://doi.org/10.1590/S0104-59702015000200006</div>\n                    <div>https://doi.org/10.1177/0306312717730428</div>\n                    <div>https://doi.org/10.1177/0306312718783087</div>\n                </div>\n                <p></p>\n                <article>\n                    <ReferenceForm setUrl={setUrl} ></ReferenceForm>\n                </article>\n            </section>\n            \n            <section>\n                <h2>Reference List</h2>\n                \n                {isError && <div>Opps, DOI: not found...</div>}\n                {isLoading && <div>Loading...</div>}\n            \n                <ul className=\"left\">\n                    {\n                        dataList.references.map( (item, index) => (\n                            <AbntItem reference={item} key={index} index={index}></AbntItem>\n                        ))\n                    }\n                </ul>\n                \n            </section>\n        </main>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}